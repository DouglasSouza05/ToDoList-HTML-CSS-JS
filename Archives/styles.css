/* Código CSS */

/* 
Seletor "*" define o estilo global, para todos os elementos da página 
"margin: 0" define a margem dos elementos
"padding: 0" define o preenchimento de todos os elementos
"box-sizing: border-box" defini o modelo de caixa dos elementos
*/

* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
  font-family: "Raleway", sans-serif;
}

/* Estilizando o Body */
body {
  /* Defini a Altura do elemento body */
  height: 100vi;
  background: linear-gradient(
    90deg,
    rgba(215, 43, 158) 0%,
    rgba(212, 59, 43)
  );

  /* 
  Comandos para posicionar os elementos ao centro
  "display: flex" define o elemento body como contêiner flexível permitindo usar propriedade de alinhamento
  "align-items: center" centraliza verticalmente dentro do flex
  "justify:content: center" centraliza horizontalmente dentro do flex
  */

  display: flex;
  align-items: center;
  justify-content: center;
}

/* 
  Comandos para estilizar
  "border: " define uma borda com largura e cor
  "padding: " define o preenchimento interno
  "width: " define a largura do elemento como % da largura do container pai
  "border-radius: " define um radio de borda
  "box-shadow: " define uma sombra para o elemento
  "display: flex" define o elemento como container flexível
  "flex: " define a propriedade flex, usada para distribuir o espaço disponível entre elementos
  "font-size: " define o tamanho da fonte. Unidade "rem" é relativa ao tamanho da fonte do elemento pai
  "font-weight: " define o peso da fonte
  "margin-left: " define uma margem esquerda para o elemento
  "cursor: " define o cursos do mouse ao passar sobre o elemento
  "min-width: " ocupar o minimo de px
  */

/* Estilizando o Container. Obs: "container" é o nome usado no codigo HTML */
.container {
  border: 3px outset purple;
  padding: 40px 20px;
  width: 40%;
  min-width: 500px;
  border-radius: 10px;
}

.new-task-container {
  background-color: white;
  padding: 30px 20px;
  border-radius: 10px;
  box-shadow: 0 15px 30px rgba(0, 0, 0, 0.3);
  display: flex;
}

/* Poderia ser usado .new-task-input {} */
.new-task-container input {
  flex: 3;
  font-size: 1rem;
  border: 1px solid gray;
  border-radius: 10px;
  padding: 12px;
  font-weight: 500;
}

.new-task-input:focus {
  outline: none;
  border-color: green;
}

.new-task-input::placeholder {
  color: green;
}

.new-task-button {
  flex: 1;
  font-size: 1rem;
  border: none;
  border-radius: 10px;
  font-weight: 500;
  height: 100%;
  background-color: green;
  color: white;
  padding: 12px;
  margin-left: 12px;
  cursor: pointer;
}

.task-container {
  background-color: white;
  padding: 30px 20px;
  margin-top: 20px;
  border-radius: 10px;
  box-shadow: 0 15px 30px, rgba(0, 0, 0, 0.3);
  width: 100%;
}

.task-item {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 6px;
  margin-top: 6px;
}

/* Estilizando o delete button */
.task-item i {
  background-color: green;
  color: white;
  padding: 8px;
  border-radius: 5px;
}

/* Utilities */

/* Usando !important para dar prioridade a regra */
.error {
  border: 1px solid red !important;
}

/* Fazendo com que o placeholder também fique vermelho caso aconteça erro na validação */
.error::placeholder {
  color: red;
}
